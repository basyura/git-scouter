#!/usr/bin/env ruby

$:.unshift(File.dirname(__FILE__) + '/../lib/')

require 'git_scouter'

ENV['GIT_PAGER'] = ''

def get_content(commit, file_path)
  IO.popen("git show #{commit}:#{file_path} 2>/dev/null") { |io| io.read }
end

def log(status)
  return 0 if pcon[:user] && status[:author] !~ /#{pcon[:user]}/

  total = 0
  point_logs = []

  for file in status.files
    next if pcon[:exclude] && file =~ /#{pcon[:exclude]}/
    next if GitScouter::Config.instance.ignore?(file)
    content1 = get_content(status[:commit], file)
    content2 = get_content(status[:commit] + '~', file)
    lcs = Diff::LCS.LCS(content1, content2)
    v1 = lcs.length - content1.length
    v2 = lcs.length - content2.length

    v1 = v1 * -1 if v1 < 0
    v2 = v2 * -1 if v2 < 0
    point = v1 > v2 ? v1 : v2
    total += point
    point_logs << point.to_s.rjust(16) + "  " + file
  end

  puts "#{total.to_s.rjust(8)} : #{status[:commit]} - #{status[:author]}  #{status[:date]}"
  puts status.comment
  point_logs.each {|log| puts log } if pcon[:list]
  #puts '' if point_logs.empty?
  total
end

def pcon
  return @pcon if @pcon
  @pcon = Hash.new
  opts = OptionParser.new
  opts.on("-a", "--all")               {|v| @pcon[:all]     = true}
  opts.on("-e expr", "--exclude expr") {|v| @pcon[:exclude] = v }
  opts.on("-u user")                   {|v| @pcon[:user]    = v }
  opts.on("-c commit")                 {|v| @pcon[:commit]  = v }
  opts.on("-d date")                   {|v| @pcon[:date]    = parse_date(v) }
  opts.on("-n num")                    {|v| @pcon[:num]     = v }
  opts.on("-l")                        {|v| @pcon[:list]    = true }
  opts.on("--debug")                   {|v| @pcon[:debug]   = true }
  opts.parse!(ARGV)

  @pcon[:date] = DateTime.now if !@pcon[:all] && !@pcon[:date]
  @pcon
end

def parse_date(v)
  if v == 'today'
    return @pcon[:date] = DateTime.now
  end
  begin
    return @pcon[:date] = DateTime.parse(v)
  rescue
  end
  return DateTime.now + v.to_i
end


puts pcon if pcon[:debug]

puts ''

if pcon[:commit]
  log_command = "git show --name-status #{pcon[:commit]}"
  status = nil
  IO.popen(log_command) do |io|
    while line = io.gets
      if line =~ /^commit/
        log(status) if status
        status = GitScouter::Status.new
      end
      status.add(line)
    end
  end
  log(status)
  exit
end

if pcon[:date]
  date_start = DateTime.new(pcon[:date].year, pcon[:date].month, pcon[:date].day,  0,  0)
  date_end   = DateTime.new(pcon[:date].year, pcon[:date].month, pcon[:date].day, 23, 59)
end
IO.popen('git log --name-status') do |io|
  status = nil
  total  = 0
  num    = 0
  cur_date  = nil
  cur_total = 0
  while line = io.gets
    if line =~ /^commit/
      if status
        date = DateTime.parse(status[:date])
        cur_date = date unless cur_date
        if date.strftime("%Y%m%d") != cur_date.strftime("%Y%m%d")
          puts "\n#{cur_date.strftime("%Y-%m-%d")} : #{cur_total}\n\n" if cur_total != 0 && !pcon[:date]
          cur_date  = date
          cur_total = 0
        end
        if pcon[:date]
          if date_start <= date && date <= date_end
            point = log(status) 
            total     += point
            cur_total += point
          end
          num += 1
          break if pcon[:num] && pcon[:num].to_i <= num
          break if date_start > date
        else
          point = log(status) 
          total     += point
          cur_total += point
          num += 1
          break if pcon[:num] && pcon[:num].to_i <= num
        end
      end
      status = GitScouter::Status.new
    end
    status.add(line)
  end
  
  puts "\n#{date.strftime("%Y-%m-%d")} : #{cur_total}\n\n" if cur_total != 0 && !pcon[:date]
  puts "\ntotal : #{total}"
end
